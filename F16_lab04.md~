Names: Nikhil Patil, Aryaman Das
GitHub IDs: nikhil-patil, aryamandas

Title: cs56-math-conversion-quiz
Brief Description: The primary goal behind this program is to test the user's knowledge regarding conversions between various notations such as hexadecimal, decimal, octal, and binary. Both a command line and GUI version of the program exist.

User Stories:
As a student, I can utilize the math conversion quiz to ameliorate my skills in writing software by becoming acquainted with the different notations of numbers. This is also an excellent study tool for any exam the involving conversion of numbers

As a student, I can take advantage of the provided hints in the GUI version so that I can structure my train of thought towards solving notation problems more effectively.

As a teacher, I can assign this math conversaion quiz to students in order to test their ability on material related to math notation conversions.

As a programmer, I can display my skill in programming by constructing and embellishing a math quiz that gives users the opportunity to sharpen their knowledge involving math conversions.


Does the Software Run?
Yes, the program runs normally. The program can be executed both in the command line interface and the GUI. In the command line interface, the user can select the number of questions they would like to answer in the quiz session. The quiz then prompts each question and verifies whether the user input is correct. In the GUI, the user has the option of selecting what specific conversions they would like to be tested on. The GUI, unlike the command interface, also includes a hint feature. Aside from that, the GUI operates the same as the command line interface

User Stories for Potential Future Features:

As a student, I am enticed to use this quiz to practice notation conversions because the program rewards correct responses with cheerful images and entertaining images.

As a teacher, I am motivated to use this quiz and its latest time trial mode which pushes my students to convert as many notations possible in a certain time. This mode also can force students to provide an answer within a certain allotted time for each question.

README.md Status Report
The current version of the README.md does a solid job of describing the purpose and the features that the application currently has. The document could be improved by providing more information regarding the organization of the files that make up the program.

Build.xml Status
The current version of the Build.xml file looks up to date. All the targets are presented cleanly and are delineated further by outlines of the tasks and responsibilities.

Assessment of Current Issues:
Based of the github reports, there are a fair number of issues to be worked on. Point distribution is generous enough to earn 1000 points for our work. For example, we want to add a feature that reveals the correct answer if you miss a question. We also want to establish a "try again" feature in case you want to restart the same test. We would also like to clean the build.xml file and update javadoc comments, generally making the code more organized. Aside from implementing new features, we want to tackle bugs such as the issue of having the same first question for every quiz in masking mode.

Additional Issues:
At this time, no additional issues have yet to attain our attention.

Code Analysis / Review
The source code finally generally have descriptive comments that explain the purpose of methods and variables. The README.md files are also helpful as they contain descriptions of the naming conventions used throughout the program files.                
